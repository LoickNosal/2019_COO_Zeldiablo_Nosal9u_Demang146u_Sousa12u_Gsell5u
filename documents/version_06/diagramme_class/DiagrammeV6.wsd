@startuml
title Zeldiablo

interface Jeu {
    +evoluer(Commande): void
    +etreFini(): boolean
    +setFini(boolean):void
}

class InterfaceGraphique{
    -panel : PanelDessin
    -controleur : Controleur
    +InterfaceGraphique(DessinJeu,int,int)
    +getControleur():Controleur
    +dessiner():void
}

class JeuPrincipal {
    -level: int
    +JeuPrincipal()
    -chargerLVL(int) :void 
    -chargerJSON(String): JSONObject
    -decoderJSON(JSONObject): Labyrinthe
    +getLVL(): int
    +main(String[]):void
    
}

class JeuPerso {
    -compteur_pas : int
    -direction: boolean
    -fini: boolean
    +JeuPerso(Aventurier)
    +evoluer(Commande): void
    +etreFini(): boolean
    +setFini(boolean):void
    +isDirection(): boolean
    +getCompteur_pas(): int
    +getPerso(): Aventurier
}

class JeuMonstre {
    +JeuMonstre(ArrayList<Monstre>)
    +evoluer(Commande): void
    +setAventurier(Aventurier): void
    +etreFini(): boolean
    +setFini(boolean):void
    +getMonstres():ArrayList<Monstre>
}

interface DessinJeu {
    +dessiner(BuffuredImage) : void
}

class Menu{
    +Menu()
    +disparaitre():void
    +visible : boolean
    #paintComponent(Graphics):void
}

class DessinPerso {
    -compteur: int
    -mur:  Image
    -porte: Image
    -casevide : Image
    -casePiege : Image
    -persoDroite : Image[]
    -persoGauche : Image[]
    -slime_vert: Image
    -slime_rouge: Image
    -slime_violet: Image
    +{static}TAILLE_CASE: int
    +DessinPerso(JeuPerso,JeuMonstre)
    +dessine(BuffuredImage): void
    +gestionVie(Graphics2D): void
}
class MoteurGraphique{
    +MoteurGraphique(ArrayList<Jeu>,DessinJeu)
    +lancerJeu(int,int):void
}
class Labyrinthe {
    -{static}TAILLE_MIN: int
    -{static}TAILLE_MAX: int
    +Labyrinthe()
    +Labyrinthe(String[])
    +caseTraversable(int,int) : boolean
    +estSurUnObstacle(int,int) : boolean
    +activerPiege(int,int):void
    +testerPiege(int,int):boolean
    +typeCase(int, int): int
    +toString():String
    +getLargeur():int
    +getHauteur():int
    -valideModele(String[]):boolean
    -defautLabyrinthe():void
}

abstract Monstre {
    #id: int
    #portee : int
    #degat: int
    -pvMax: int
    +Monstre(int, int, int, int, int, int, String)
    +getPvMax(): int
    +peutAvancer(int, int): boolean
    +attaquer(Aventurier): void
    +avancer(int): void
    +{abstract}seDeplacer(char):void
    +{abstract}seDeplacer(Aventurier):void
    +getDegat():int
    +getPortee():int
    +getId():int
    +{static}creerMonstreParID(int,int,int):Monstre
}

class MonstreAleatoire {

    +MonstreAleatoire(int, int, int, int, int, int, String)
    +seDeplacer(char):void
    +seDeplacer(Aventurier):void
}

class MonstreSuivi {

    +MonstreSuivi(int, int, int, int, int, int, String)
    +seDeplacer(char):void
    +seDeplacer(Aventurier):void
}

class MonstreImmobile {

    +MonstreImmobile(int, int, int, int, int, int, String)
    +seDeplacer(char):void
    +seDeplacer(Aventurier):void
}

abstract Case {
    -{static} taille: int
    #posX: int
    #posY: int
    +Case()
    +getPosX():int
    +getPosY():int
    +estDedans(int,int):boolean
    +{abstract}peutTraverser():boolean
    +{abstract}typeCase():int
}

class CaseVide {
    +CaseVide(int, int)
    +toString():String
    +peutTraverser():boolean
    +typeCase():int
}

class Mur {
    +Mur(int, int)
    +toString():String
    +peutTraverser():boolean
    +typeCase():int
}

class CaseSortie {
    +CaseSortie(int, int)
    +peutTraverser():boolean
    +typeCase():int
}
class CasePiege {
    -estPasseDessus:boolean
    +CasePiege(int,int)
    +peutTraverser():boolean
    +setEstPasse():void
    +getEstPasse():boolean
    +typeCase():int
}

abstract Entite {
    #pv: int
    #x: int
    #y: int
    #nom: String
    #vivant: boolean

    +Entite(int, int, int, String)
    +getVivant(); boolean
    +setLabyrinthe(Labyrinthe):void
    +getLab(): Labyrinthe
    +getNom():String
    +getPv():int
    +getX():int
    +getY():int
    +{abstract}seDeplacer(char): void
    +{abstract}seDeplacer(Aventurier): void
    +{abstract}peutAvancer(int,int):boolean
    +subirDegat(int): void
    +mort(): void
}

class Aventurier {
    -pvMax: int
    +Aventurier(int, int int, String)
    +getPvMax(): int
    +seDeplacer(char):void
    +seDeplacer(Aventurier): void
    +peutAvancer(int, int): boolean
}


JeuPrincipal "1" --> "0" Labyrinthe : +labyrinthe
JeuPrincipal "1" --> "1" Aventurier : +aventurier

Entite --> "1" Labyrinthe : #lab

JeuPerso "1" --> "1" Aventurier : -personnage
JeuPerso ..|> Jeu

DessinPerso ..|> DessinJeu
DessinPerso "1" --> "0..1" JeuPerso : -jeuPerso
DessinPerso "1" --> "0..1" JeuMonstre : -jeuMonstre

MoteurGraphique "1" --> DessinJeu : -dessin
MoteurGraphique "1" --> InterfaceGraphique : -gui
MoteurGraphique "0..*" --> Jeu : -jeu

InterfaceGraphique "1" --> Menu : +menu


JeuMonstre "1" --> "0..*" Monstre : -monstres
JeuMonstre "1" --> "0..1" Aventurier : -aventurier
JeuMonstre ..|> Jeu

Aventurier --|> Entite

Labyrinthe "1" --> "0..*" Case : -cases

Monstre --|> Entite

CaseVide --|> Case

Mur --|> Case

CaseSortie--|> Case

CasePiege --|>Case

MonstreImmobile--|> Monstre

MonstreAleatoire--|> Monstre

MonstreSuivi--|> Monstre

@enduml